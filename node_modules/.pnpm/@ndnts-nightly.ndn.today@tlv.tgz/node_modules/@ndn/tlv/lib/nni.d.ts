import type { Encodable } from "./encoder.js";
type Len = 1 | 2 | 4 | 8;
interface Options {
    /** If set, use/enforce specific TLV-LENGTH. */
    len?: Len;
    /** If true, allow approximate integers. */
    unsafe?: boolean;
}
/** Create Encodable from non-negative integer. */
export declare function NNI(n: number | bigint, { len, unsafe, }?: Options): Encodable;
export declare namespace NNI {
    /** Determine if len is a valid length of encoded NNI. */
    function isValidLength(len: number): boolean;
    /** Decode non-negative integer as number. */
    function decode(value: Uint8Array, opts?: Options & {
        big?: false;
    }): number;
    /** Decode non-negative integer as bigint. */
    function decode(value: Uint8Array, opts: Options & {
        big: true;
    }): bigint;
    /** Error if n exceeds [0,MAX_SAFE_INTEGER] range. */
    function constrain(n: number, typeName: string): number;
    /** Error if n exceeds [0,max] range. */
    function constrain(n: number, typeName: string, max: number): number;
    /** Error if n exceeds [min,max] range. */
    function constrain(n: number, typeName: string, min: number, max: number): number;
}
export {};
