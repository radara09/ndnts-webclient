import type { Decoder } from "./decoder.js";
import type { Encodable } from "./encoder.js";
/** An TLV element that allows extension sub element. */
export interface Extensible {
    readonly [Extensible.TAG]: ExtensionRegistry<any>;
}
export declare namespace Extensible {
    const TAG: unique symbol;
    /** Clone extension fields of src to dst. */
    function cloneRecord(dst: Extensible, src: Extensible): void;
}
/**
 * An extension sub element on a parent TLV element.
 * T is the parent TLV element type.
 * R is the value type of this extension.
 */
export interface Extension<T, R = unknown> {
    /** TLV-TYPE. */
    readonly tt: number;
    /** Order relative to other extensions, used on encoding only. */
    readonly order?: number;
    /**
     * Decode extension element.
     * @param obj parent object.
     * @param tlv TLV of sub element; its TLV-TYPE would be this.tt .
     * @param accumulator previous decoded value, if extension element appears more than once.
     */
    decode: (obj: T, tlv: Decoder.Tlv, accumulator?: R) => R;
    /**
     * Encode extension element.
     * @param obj parent object.
     * @param value decoded value.
     * @returns encoding of sub element; its TLV-TYPE should be this.tt .
     */
    encode: (obj: T, value: R) => Encodable;
}
export declare namespace Extension {
    /** Retrieve value of an extension field. */
    function get(obj: Extensible, tt: number): unknown;
    /** Assign value of an extension field. */
    function set(obj: Extensible, tt: number, value: unknown): void;
    /** Clear value of an extension field. */
    function clear(obj: Extensible, tt: number): void;
}
/** Registry of known extension fields of a parent TLV element. */
export declare class ExtensionRegistry<T extends Extensible> {
    private readonly table;
    /** Add an extension. */
    readonly registerExtension: <R>(ext: Extension<T, R>) => void;
    /** Remove an extension. */
    readonly unregisterExtension: (tt: number) => void;
    /** UnknownElementCallback for EvDecoder. */
    readonly decodeUnknown: (target: T, tlv: Decoder.Tlv, order: number) => boolean;
    /** Encode extension fields. */
    encode(source: T): Encodable[];
}
