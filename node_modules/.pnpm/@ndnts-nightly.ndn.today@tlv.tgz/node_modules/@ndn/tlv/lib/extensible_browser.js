import { __importDefault, __importStar } from "tslib";
import _cjsDefaultImport0 from "mnemonist/default-weak-map.js"; const DefaultWeakMap = __importDefault(_cjsDefaultImport0).default;
const RECORDS = new DefaultWeakMap(() => new Map());
export var Extensible;
(function (Extensible) {
    Extensible.TAG = Symbol("Extensible");
    /** Clone extension fields of src to dst. */
    function cloneRecord(dst, src) {
        RECORDS.set(dst, new Map(RECORDS.get(src)));
    }
    Extensible.cloneRecord = cloneRecord;
})(Extensible || (Extensible = {}));
export var Extension;
(function (Extension) {
    /** Retrieve value of an extension field. */
    function get(obj, tt) {
        return RECORDS.get(obj).get(tt);
    }
    Extension.get = get;
    /** Assign value of an extension field. */
    function set(obj, tt, value) {
        RECORDS.get(obj).set(tt, value);
    }
    Extension.set = set;
    /** Clear value of an extension field. */
    function clear(obj, tt) {
        RECORDS.get(obj).delete(tt);
    }
    Extension.clear = clear;
})(Extension || (Extension = {}));
/** Registry of known extension fields of a parent TLV element. */
export class ExtensionRegistry {
    table = new Map();
    /** Add an extension. */
    registerExtension = (ext) => {
        this.table.set(ext.tt, ext);
    };
    /** Remove an extension. */
    unregisterExtension = (tt) => {
        this.table.delete(tt);
    };
    /** UnknownElementCallback for EvDecoder. */
    decodeUnknown = (target, tlv, order) => {
        const { type: tt } = tlv;
        const ext = this.table.get(tt);
        if (!ext) {
            return false;
        }
        const record = RECORDS.get(target);
        record.set(tt, ext.decode(target, tlv, record.get(tt)));
        return true;
    };
    /** Encode extension fields. */
    encode(source) {
        const record = RECORDS.peek(source);
        if (!record) {
            return [];
        }
        const fields = [];
        for (const [tt, value] of record) {
            const ext = this.table.get(tt);
            if (!ext) {
                throw new Error(`unknown extension type ${tt}`);
            }
            fields.push({ tt, value, ext });
        }
        fields.sort((a, b) => (a.ext.order ?? a.tt) - (b.ext.order ?? b.tt));
        return fields.map(({ value, ext }) => ext.encode(source, value));
    }
}
