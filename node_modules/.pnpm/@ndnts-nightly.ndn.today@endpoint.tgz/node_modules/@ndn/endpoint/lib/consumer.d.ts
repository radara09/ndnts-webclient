import { type Forwarder } from "@ndn/fw";
import { type NameLike, type Verifier, Data, Interest } from "@ndn/packet";
import { type RetxPolicy } from "./retx.js";
export interface ConsumerOptions {
    /** Description for debugging purpose. */
    describe?: string;
    /** AbortSignal that allows canceling the Interest via AbortController. */
    signal?: AbortSignal;
    /**
     * Modify Interest according to specified options.
     * Default is no modification.
     */
    modifyInterest?: Interest.Modify;
    /**
     * Retransmission policy.
     * Default is disabling retransmission.
     */
    retx?: RetxPolicy;
    /**
     * Data verifier.
     * Default is no verification.
     */
    verifier?: Verifier;
}
/**
 * Progress of Data retrieval.
 *
 * This is a Promise that resolves with the retrieved Data and rejects upon timeout,
 * annotated with the Interest and some counters.
 */
export interface ConsumerContext extends Promise<Data> {
    readonly interest: Interest;
    readonly nRetx: number;
}
/** Consumer functionality of Endpoint. */
export declare class EndpointConsumer {
    fw: Forwarder;
    opts: ConsumerOptions;
    /** Consume a single piece of Data. */
    consume(interestInput: Interest | NameLike, opts?: ConsumerOptions): ConsumerContext;
}
