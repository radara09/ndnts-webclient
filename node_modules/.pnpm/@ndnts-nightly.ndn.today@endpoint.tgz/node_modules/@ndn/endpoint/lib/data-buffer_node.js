import { assert } from "@ndn/util";
import { signUnsignedData } from "./producer_node.js";
// We declare an interface here instead of importing DataStore, in order to reduce bundle size for
// webapps that do not use DataBuffer. The trade-off is that, applications wanting to use
// DataBuffer would have to import memdown and @ndn/repo themselves.
/**
 * DataBuffer implementation based on DataStore from @ndn/repo package.
 *
 * @example
 * new DataStoreBuffer(new DataStore(memdown()))
 */
export class DataStoreBuffer {
    store;
    constructor(store, { ttl = 60000, dataSigner, } = {}) {
        this.store = store;
        assert(ttl >= 0);
        this.ttl = ttl;
        this.dataSigner = dataSigner;
    }
    ttl;
    dataSigner;
    find(interest) {
        return this.store.find(interest);
    }
    async insert(...pkts) {
        const expireTime = this.ttl > 0 ? Date.now() + this.ttl : undefined;
        if (this.dataSigner) {
            await Promise.all(pkts.map((data) => signUnsignedData(data, this.dataSigner)));
        }
        return this.store.insert({ expireTime }, ...pkts);
    }
}
