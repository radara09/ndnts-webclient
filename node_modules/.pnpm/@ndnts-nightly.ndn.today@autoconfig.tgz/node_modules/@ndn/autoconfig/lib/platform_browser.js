import { WsTransport } from "@ndn/ws-transport";
export const fetch = globalThis.fetch;
export const FCH_DEFAULTS = {
    transports({ H3Transport } = {}) {
        const list = ["wss"];
        if (H3Transport?.supported) {
            list.push("http3");
        }
        return list;
    },
};
export async function getDefaultGateway() {
    throw new Error("no default gateway in browser");
}
export function createFace(router, { fw, H3Transport, mtu = 1200, connectTimeout, addRoutes, }) {
    const uri = (() => {
        try {
            return new URL(router);
        }
        catch {
            return new URL(`wss://${router}/ws/`);
        }
    })();
    switch (uri.protocol) {
        case "ws:":
        case "wss:": {
            return WsTransport.createFace({ fw, addRoutes }, uri.toString(), { connectTimeout });
        }
        case "https:": {
            if (!H3Transport) {
                throw new Error("H3Transport unavailable");
            }
            return H3Transport.createFace({ fw, addRoutes, lp: { mtu } }, uri.toString());
        }
        default: {
            throw new Error(`unknown protocol ${uri.protocol}`);
        }
    }
}
