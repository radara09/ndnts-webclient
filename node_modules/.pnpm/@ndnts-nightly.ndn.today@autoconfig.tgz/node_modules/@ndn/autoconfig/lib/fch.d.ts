import { Name } from "@ndn/packet";
import type { ConnectRouterOptions } from "./router.js";
export interface PlatformFchDefaults {
    transports: (opts?: ConnectRouterOptions) => string[];
    readonly hasIPv4?: boolean;
    readonly hasIPv6?: boolean;
}
/** FCH service request. */
export interface FchRequest {
    /** FCH service URI. */
    server?: string;
    /**
     * Transport protocol, such as "udp".
     * Ignored if `transports` is specified.
     */
    transport?: string;
    /**
     * Number of routers.
     * Ignored if `transports` is a Record.
     */
    count?: number;
    /**
     * Transport protocols.
     * If this is an array of transport protocols, the quantity of each is specified by `count`.
     * If this is a Record, each key is a transport protocol and each value is the quantity.
     */
    transports?: readonly string[] | Record<string, number>;
    /** IPv4 allowed? */
    ipv4?: boolean;
    /** IPv6 allowed? */
    ipv6?: boolean;
    /** Client geolocation. */
    position?: [lon: number, lat: number];
    /** Network authority, such as "yoursunny". */
    network?: string;
    /** AbortSignal that allows canceling the request via AbortController. */
    signal?: AbortSignal;
}
/** FCH service response. */
export interface FchResponse {
    readonly updated?: Date;
    readonly routers: FchResponse.Router[];
}
export declare namespace FchResponse {
    interface Router {
        transport: string;
        connect: string;
        prefix?: Name;
    }
}
/** FCH service query. */
export declare function fchQuery(req?: FchRequest): Promise<FchResponse>;
