import { type Forwarder, type FwFace } from "@ndn/fw";
import { type NameLike, Interest, Name } from "@ndn/packet";
import type { H3Transport } from "@ndn/quic-transport";
type TestConnectionPacket = string | Name | Interest;
export interface ConnectRouterOptions {
    fw?: Forwarder;
    /**
     * Use TCP instead of UDP.
     *
     * This is only relevant in Node.js environment.
     */
    preferTcp?: boolean;
    /**
     * Enable HTTP/3 transport.
     *
     * This is only relevant in browser environment.
     *
     * This should be set to `H3Transport` class instance.
     * It reduces browser bundle size in applications that do not use H3Transport.
     */
    H3Transport?: typeof H3Transport;
    /** Override MTU of datagram faces. */
    mtu?: number;
    /** Connect timeout (in milliseconds). */
    connectTimeout?: number;
    /**
     * Test face connection.
     *
     * - false: skip test.
     * - string or Name or Interest or array: express Interest(s) and wait for any Data.
     *   If string ends with "/*", it's replaced with a random component.
     * - function: execute the custom tester function.
     *
     * Default is "/localhop/nfd/rib/list".
     */
    testConnection?: false | TestConnectionPacket | TestConnectionPacket[] | ((face: FwFace) => Promise<unknown>);
    /**
     * InterestLifetime of connection test Interest packets.
     * Used only if testConnection is a string or Name.
     * Default is 2000.
     */
    testConnectionTimeout?: number;
    /** Routes to be added on the created face. Default is ["/"]. */
    addRoutes?: NameLike[];
}
export interface ConnectRouterResult {
    /** Input router string. */
    router: string;
    /** Created face */
    face: FwFace;
    /** Execution duration of testConnection function. */
    testConnectionDuration: number;
    /** Return value from custom testConnection function. */
    testConnectionResult: unknown;
}
/** Connect to a router and test the connection. */
export declare function connectToRouter(router: string, opts?: ConnectRouterOptions): Promise<ConnectRouterResult>;
export {};
