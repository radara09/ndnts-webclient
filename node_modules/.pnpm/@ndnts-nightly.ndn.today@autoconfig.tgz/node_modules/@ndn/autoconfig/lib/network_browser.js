import { fchQuery } from "./fch_browser.js";
import { FCH_DEFAULTS, getDefaultGateway } from "./platform_browser.js";
import { connectToRouter } from "./router_browser.js";
/** Connect to an NDN network. */
export async function connectToNetwork(opts = {}) {
    const { fch = { count: 4 }, preferH3 = false, tryDefaultGateway = true, fallback = [], fastest = 1, } = opts;
    const connected = [];
    const errors = [];
    for await (const routers of (async function* () {
        const routers = [];
        if (fch !== false) {
            fch.transports ??= FCH_DEFAULTS.transports(opts);
            const res = await fchQuery(fch);
            const h3routers = [];
            for (const r of res.routers) {
                (preferH3 && r.transport === "http3" ? h3routers : routers).push(r.connect);
            }
            yield h3routers;
        }
        if (tryDefaultGateway) {
            try {
                routers.unshift(await getDefaultGateway());
            }
            catch { }
        }
        yield routers;
        yield fallback;
    })()) {
        await Promise.all(routers.map(async (router) => {
            try {
                connected.push(await connectToRouter(router, opts));
            }
            catch (err) {
                errors.push(`  ${router} ${err}`);
            }
        }));
        if (connected.length > 0) {
            break;
        }
    }
    if (connected.length === 0) {
        throw new Error(`connect to network failed\n${errors.join("\n")}`);
    }
    connected.sort((a, b) => a.testConnectionDuration - b.testConnectionDuration);
    for (const { face } of connected.splice(fastest, Infinity)) {
        face.close();
    }
    return connected.map(({ face }) => face);
}
