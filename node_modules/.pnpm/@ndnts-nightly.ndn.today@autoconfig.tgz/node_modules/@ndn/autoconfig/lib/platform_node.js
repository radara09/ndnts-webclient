import * as os from "node:os";
import { splitHostPort, TcpTransport, udp_helper, UdpTransport } from "@ndn/node-transport";
import defaultGateway from "default-gateway";
import nodeFetch from "node-fetch";
export function fetch(input, init) {
    return nodeFetch(input, init);
}
function hasAddressFamily(want) {
    return Object.values(os.networkInterfaces()).some((addrs) => addrs?.some((addr) => udp_helper.intfHasAddressFamily(want, addr)));
}
export const FCH_DEFAULTS = {
    transports() { return ["udp"]; },
    get hasIPv4() { return hasAddressFamily(4); },
    get hasIPv6() { return hasAddressFamily(6); },
};
export async function getDefaultGateway() {
    const result = await defaultGateway.v4();
    return result.gateway;
}
export function createFace(router, { fw, preferTcp = false, mtu, connectTimeout, addRoutes, }) {
    const { host, port } = splitHostPort(router);
    if (preferTcp) {
        return TcpTransport.createFace({ fw, addRoutes }, { host, port, connectTimeout });
    }
    return UdpTransport.createFace({ fw, addRoutes, lp: { mtu } }, { host, port });
}
