import { L3Face, Transport } from "@ndn/l3face";
interface WebTransport {
    readonly ready: Promise<void>;
    readonly closed: Promise<WebTransportCloseInfo>;
    close(closeInfo?: Partial<WebTransportCloseInfo>): void;
    readonly datagrams: WebTransportDatagramDuplexStream;
}
interface WebTransportCloseInfo {
    closeCode: number;
    reason: string;
}
interface WebTransportDatagramDuplexStream {
    readonly readable: ReadableStream<Uint8Array>;
    readonly writable: WritableStream<Uint8Array>;
    readonly maxDatagramSize: number;
}
/** HTTP/3 transport. */
export declare class H3Transport extends Transport {
    private readonly uri;
    private readonly tr;
    /** Whether current browser supports WebTransport. */
    static readonly supported: boolean;
    readonly rx: Transport.Rx;
    constructor(uri: string, tr: WebTransport);
    get mtu(): number;
    readonly tx: (iterable: AsyncIterable<Uint8Array>) => Promise<void>;
    reopen(): Promise<H3Transport>;
}
export declare namespace H3Transport {
    /**
     * Create a transport and connect to remote endpoint.
     * @param uri server URI.
     */
    function connect(uri: string): Promise<H3Transport>;
    /** Create a transport and add to forwarder. */
    const createFace: L3Face.CreateFaceFunc<H3Transport, [uri: string]>;
}
export {};
