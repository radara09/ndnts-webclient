import { Decoder } from "@ndn/tlv";
import { safeIter } from "@ndn/util";
import { pEvent } from "p-event";
import { writeToStream } from "streaming-iterables";
export async function* rxFromStream(conn) {
    let leftover = Buffer.alloc(0);
    for await (const chunk of safeIter(conn)) {
        if (leftover.length > 0) {
            leftover = Buffer.concat([leftover, chunk], leftover.length + chunk.length);
        }
        else {
            leftover = chunk;
        }
        const decoder = new Decoder(leftover);
        let consumed = 0;
        while (true) {
            let tlv;
            try {
                tlv = decoder.read();
            }
            catch {
                break;
            }
            yield tlv;
            consumed += tlv.size;
        }
        if (consumed > 0) {
            leftover = leftover.subarray(consumed);
        }
    }
}
export function txToStream(conn) {
    return async (iterable) => {
        try {
            await writeToStream(conn, iterable);
        }
        finally {
            conn.end();
            try {
                await pEvent(conn, "finish", { timeout: 100 });
            }
            catch { }
            const destroyable = conn;
            if (typeof destroyable.destroy === "function") {
                destroyable.destroy();
            }
        }
    };
}
