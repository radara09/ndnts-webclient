import * as net from "net";
import { L3Face, StreamTransport } from "@ndn/l3face";
import { joinHostPort } from "./hostport_browser.js";
const DEFAULT_PORT = 6363;
/** TCP socket transport. */
export class TcpTransport extends StreamTransport {
    connectOpts;
    constructor(sock, connectOpts) {
        super(sock, {
            describe: `TCP(${joinHostPort(sock.remoteAddress, sock.remotePort)})`,
            local: sock.localAddress === sock.remoteAddress,
        });
        this.connectOpts = connectOpts;
    }
    reopen() {
        return TcpTransport.connect(this.connectOpts);
    }
}
(function (TcpTransport) {
    function connect(arg1, port, opts) {
        return connectImpl(arg1, port, opts);
    }
    TcpTransport.connect = connect;
    function connectImpl(arg1, port = DEFAULT_PORT, opts = {}) {
        const connectOpts = arg1 === undefined ? { port } :
            typeof arg1 === "string" ? { host: arg1, port } :
                { host: arg1.host, port: arg1.port ?? DEFAULT_PORT, family: arg1.family };
        const { connectTimeout = 10000, signal, } = typeof arg1 === "object" ? arg1 : opts;
        return new Promise((resolve, reject) => {
            const sock = net.connect(connectOpts);
            sock.setNoDelay(true);
            let timeout; // eslint-disable-line prefer-const
            const fail = (err) => {
                clearTimeout(timeout);
                sock.destroy();
                reject(err);
            };
            timeout = setTimeout(() => fail(new Error("connectTimeout")), connectTimeout);
            const onabort = () => fail(new Error("abort"));
            signal?.addEventListener("abort", onabort);
            sock.on("error", () => undefined);
            sock.once("error", fail);
            sock.once("connect", () => {
                clearTimeout(timeout);
                sock.off("error", fail);
                signal?.removeEventListener("abort", onabort);
                resolve(new TcpTransport(sock, connectOpts));
            });
        });
    }
    /** Create a transport and add to forwarder. */
    TcpTransport.createFace = L3Face.makeCreateFace(connectImpl);
})(TcpTransport || (TcpTransport = {}));
