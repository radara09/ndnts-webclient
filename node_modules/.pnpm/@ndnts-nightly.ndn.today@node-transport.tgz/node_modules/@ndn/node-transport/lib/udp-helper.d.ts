/// <reference types="node" />
/// <reference types="node" />
import * as dgram from "node:dgram";
import * as os from "node:os";
export declare const DEFAULT_MTU = 65000;
export type Socket = dgram.Socket;
export interface SocketBufferOption {
    recvBufferSize?: number;
    sendBufferSize?: number;
}
export type AddressFamily = 4 | 6;
export declare function intfHasAddressFamily(want: AddressFamily, { family }: os.NetworkInterfaceInfo): boolean;
export interface AddressFamilyOption {
    /**
     * IPv4 or IPv6.
     * Default is IPv4, unless hostname is an IPv6 address (contains a colon).
     */
    family?: AddressFamily;
}
export interface OpenSocketOptions extends SocketBufferOption, AddressFamilyOption {
    /** Bind options, such as local address and port. */
    bind?: dgram.BindOptions;
}
export declare function openSocket({ family, recvBufferSize, sendBufferSize, bind, }: OpenSocketOptions): Promise<Socket>;
export interface ConnectOptions {
    /** Remote address. */
    host: string;
    /** Remote port. */
    port?: number;
}
export declare function connect(sock: Socket, { host, port, }: ConnectOptions): Promise<Socket>;
export interface UnicastOptions extends OpenSocketOptions, ConnectOptions {
}
export declare function openUnicast(opts: UnicastOptions): Promise<Socket>;
/**
 * List network interfaces capable of IPv4 multicast.
 * @returns IPv4 address of each network interface.
 */
export declare function listMulticastIntfs(): string[];
export interface MulticastOptions extends SocketBufferOption {
    /** IPv4 address of local network interface. */
    intf: string;
    /** Multicast group address. */
    group?: string;
    /** Local and group port. */
    port?: number;
    /** Multicast TTL (for unit testing). */
    multicastTtl?: number;
    /** MulticastLoopback flag (for unit testing). */
    multicastLoopback?: boolean;
}
export declare function openMulticastRx(opts: MulticastOptions): Promise<Socket>;
export declare function openMulticastTx(opts: MulticastOptions): Promise<Socket>;
