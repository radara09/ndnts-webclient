import * as net from "net";
import { L3Face, StreamTransport } from "@ndn/l3face";
/** Unix socket transport. */
export class UnixTransport extends StreamTransport {
    connectOpts;
    constructor(sock, connectOpts) {
        super(sock, {
            describe: `Unix(${connectOpts.path})`,
            local: true,
        });
        this.connectOpts = connectOpts;
    }
    reopen() {
        return UnixTransport.connect(this.connectOpts);
    }
}
(function (UnixTransport) {
    /**
     * Create a transport and connect to remote endpoint.
     * @param pathOrOpts Unix socket path.
     */
    function connect(pathOrOpts) {
        const connectOpts = typeof pathOrOpts === "string" ? { path: pathOrOpts } :
            pathOrOpts;
        return new Promise((resolve, reject) => {
            const sock = net.connect(connectOpts);
            sock.setNoDelay(true);
            sock.on("error", () => undefined);
            sock.once("error", reject);
            sock.once("connect", () => {
                sock.off("error", reject);
                resolve(new UnixTransport(sock, connectOpts));
            });
        });
    }
    UnixTransport.connect = connect;
    /** Create a transport and add to forwarder. */
    UnixTransport.createFace = L3Face.makeCreateFace(UnixTransport.connect);
})(UnixTransport || (UnixTransport = {}));
