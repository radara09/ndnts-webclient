import { __importDefault, __importStar } from "tslib";
import { lpm } from "@ndn/packet";
import { assert } from "@ndn/util";
import _cjsDefaultImport0 from "mnemonist/default-map.js"; const DefaultMap = __importDefault(_cjsDefaultImport0).default;
class FibEntry {
    nexthops = new Map(); // face=>capture
}
export class Fib {
    table = new DefaultMap(() => new FibEntry());
    insert(face, nameHex, capture) {
        const entry = this.table.get(nameHex);
        assert(!entry.nexthops.has(face));
        entry.nexthops.set(face, capture);
    }
    delete(face, nameHex) {
        const entry = this.table.peek(nameHex);
        assert(!!entry);
        entry.nexthops.delete(face);
        if (entry.nexthops.size === 0) {
            this.table.delete(nameHex);
        }
    }
    lookup(name) {
        const result = new Set();
        for (const entry of lpm(name, (prefixHex) => this.table.peek(prefixHex))) {
            let capture = false;
            for (const [nh, c] of entry.nexthops) {
                result.add(nh);
                capture ||= c;
            }
            if (capture) {
                break;
            }
        }
        return result;
    }
}
