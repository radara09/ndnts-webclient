import { type NameLike } from "@ndn/packet";
import type TypedEmitter from "typed-emitter";
import type { Forwarder, ForwarderImpl } from "./forwarder.js";
import type { FwPacket } from "./packet.js";
type Events = {
    /** Emitted upon face is up as reported by lower layer. */
    up: () => void;
    /** Emitted upon face is down as reported by lower layer. */
    down: () => void;
    /** Emitted upon face is closed. */
    close: () => void;
};
/** A socket or network interface associated with forwarding plane. */
export interface FwFace extends TypedEmitter<Events> {
    readonly fw: Forwarder;
    readonly attributes: FwFace.Attributes;
    readonly running: boolean;
    /** Shutdown the face. */
    close(): void;
    toString(): string;
    /** Determine if a route is present on the face. */
    hasRoute(name: NameLike): boolean;
    /** Add a route toward the face. */
    addRoute(name: NameLike, announcement?: FwFace.RouteAnnouncement): void;
    /** Remove a route toward the face. */
    removeRoute(name: NameLike, announcement?: FwFace.RouteAnnouncement): void;
    /** Add a prefix announcement associated with the face. */
    addAnnouncement(name: NameLike): void;
    /** Remove a prefix announcement associated with the face. */
    removeAnnouncement(name: NameLike): void;
}
export declare namespace FwFace {
    interface Attributes extends Record<string, any> {
        /** Short string to identify the face. */
        describe?: string;
        /** Whether face is local. Default is false. */
        local?: boolean;
        /** Whether to readvertise registered routes. Default is true. */
        advertiseFrom?: boolean;
        /**
         * Whether routes registered on this face would cause FIB to stop matching onto shorter prefixes.
         * Default is true.
         * More explanation in @ndn/endpoint package ProducerOptions type.
         */
        routeCapture?: boolean;
    }
    type RouteAnnouncement = boolean | number | NameLike;
    type RxTxEvents = {
        up: () => void;
        down: () => void;
    };
    interface RxTxBase {
        readonly attributes?: Attributes;
        on?: (...args: Parameters<TypedEmitter<RxTxEvents>["on"]>) => void;
        off?: (...args: Parameters<TypedEmitter<RxTxEvents>["off"]>) => void;
    }
    interface RxTx extends RxTxBase {
        rx: AsyncIterable<FwPacket>;
        tx: (iterable: AsyncIterable<FwPacket>) => void;
    }
    interface RxTxDuplex extends RxTxBase {
        /**
         * The transform function takes an iterable of packets sent by the forwarder,
         * and returns an iterable of packets received by the forwarder.
         */
        duplex: (iterable: AsyncIterable<FwPacket>) => AsyncIterable<FwPacket>;
    }
}
declare const FaceImpl_base: new () => TypedEmitter<Events>;
export declare class FaceImpl extends FaceImpl_base implements FwFace {
    readonly fw: ForwarderImpl;
    private readonly rxtx;
    readonly attributes: FwFace.Attributes;
    private readonly routes;
    private readonly announcements;
    running: boolean;
    private readonly txQueue;
    constructor(fw: ForwarderImpl, rxtx: FwFace.RxTx | FwFace.RxTxDuplex, attributes: FwFace.Attributes);
    close(): void;
    toString(): string;
    hasRoute(nameInput: NameLike): boolean;
    addRoute(nameInput: NameLike, announcement?: FwFace.RouteAnnouncement): void;
    removeRoute(nameInput: NameLike, announcement?: FwFace.RouteAnnouncement): void;
    addAnnouncement(nameInput: NameLike): void;
    removeAnnouncement(nameInput: NameLike): void;
    /** Transmit a packet on the face. */
    send(pkt: FwPacket): void;
    private readonly handleLowerUp;
    private readonly handleLowerDown;
    private readonly rxLoop;
    private txLoop;
}
export {};
