import { Data, Interest, Nack } from "@ndn/packet";
import { console } from "@ndn/util";
import { Forwarder } from "./forwarder_browser.js";
/** Print trace logs from Forwarder events. */
export class Tracer {
    static enable(opts = {}) {
        return new Tracer(opts);
    }
    output;
    fw;
    constructor({ output = console, fw = Forwarder.getDefault(), face = true, prefix = true, ann = true, pkt = true, }) {
        this.output = output;
        this.fw = fw;
        if (face) {
            this.fw.on("faceadd", this.faceadd);
            this.fw.on("facerm", this.facerm);
        }
        if (prefix) {
            this.fw.on("prefixadd", this.prefixadd);
            this.fw.on("prefixrm", this.prefixrm);
        }
        if (ann) {
            this.fw.on("annadd", this.annadd);
            this.fw.on("annrm", this.annrm);
        }
        if (pkt) {
            this.fw.on("pktrx", this.pktrx);
            this.fw.on("pkttx", this.pkttx);
        }
    }
    disable() {
        this.fw.off("faceadd", this.faceadd);
        this.fw.off("facerm", this.facerm);
        this.fw.off("prefixadd", this.prefixadd);
        this.fw.off("prefixrm", this.prefixrm);
        this.fw.off("annadd", this.annadd);
        this.fw.off("annrm", this.annrm);
        this.fw.off("pktrx", this.pktrx);
        this.fw.off("pkttx", this.pkttx);
    }
    faceadd = (face) => {
        this.output.log(`+Face ${face}`);
    };
    facerm = (face) => {
        this.output.log(`-Face ${face}`);
    };
    prefixadd = (face, prefix) => {
        this.output.log(`${face} +Prefix ${prefix}`);
    };
    prefixrm = (face, prefix) => {
        this.output.log(`${face} -Prefix ${prefix}`);
    };
    annadd = (name) => {
        this.output.log(`+Announcement ${name}`);
    };
    annrm = (name) => {
        this.output.log(`-Announcement ${name}`);
    };
    pktrx = (face, pkt) => {
        this.pkt(face, pkt, ">");
    };
    pkttx = (face, pkt) => {
        this.pkt(face, pkt, "<");
    };
    pkt(face, pkt, dir) {
        switch (true) {
            case pkt.l3 instanceof Interest: {
                const act = pkt.cancel ? "Cancel" :
                    pkt.reject ? `Reject(${pkt.reject})` :
                        "I";
                this.output.log(`${face} ${dir}${act} ${interestToString(pkt.l3)}`);
                break;
            }
            case pkt.l3 instanceof Data: {
                const { name } = pkt.l3;
                this.output.log(`${face} ${dir}D ${name}`);
                break;
            }
            case pkt.l3 instanceof Nack: {
                const { interest, reason } = pkt.l3;
                this.output.log(`${face} ${dir}N ${interestToString(interest)}~${reason}`);
                break;
            }
        }
    }
}
function interestToString({ name, canBePrefix, mustBeFresh }) {
    return `${name}${canBePrefix ? "[P]" : ""}${mustBeFresh ? "[F]" : ""}`;
}
